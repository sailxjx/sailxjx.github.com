// Generated by CoffeeScript 1.6.2
(function() {
  var ColorConverter, Colorfull, colorPick, colorfull, mouse,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    _this = this;

  ColorConverter = (function() {
    function ColorConverter(colorDesc) {
      this.colorDesc = colorDesc;
      this.regex = {
        'rgba': /rgba?\(([0-9\.\,\ ]+)\)/,
        'hsla': /hsla?\(([0-9\.\,\ \%]+)\)/,
        'hex': /\#([a-zA-Z0-9]{6})/
      };
      this.matches = null;
      this.type = null;
      this._match();
    }

    ColorConverter.prototype.toRgba = function() {
      if (this.type) {
        return this["_" + this.type + "ToRgba"].call(this);
      } else {
        return null;
      }
    };

    ColorConverter.prototype.toHsla = function() {
      if (this.type) {
        return this["_" + this.type + "ToHsla"].call(this);
      } else {
        return null;
      }
    };

    ColorConverter.prototype.toHex = function() {
      if (this.type) {
        return this["_" + this.type + "ToHex"].call(this);
      } else {
        return null;
      }
    };

    ColorConverter.prototype._match = function() {
      var type;

      for (type in this.regex) {
        if (this.matches = this.colorDesc.match(this.regex[type])) {
          this.type = type;
          return this.matches;
        }
      }
      return null;
    };

    ColorConverter.prototype._rgbaToRgba = function() {
      var a, b, g, r, _ref;

      _ref = this.matches[1].split(',').map(function(v) {
        return v.trim();
      }), r = _ref[0], g = _ref[1], b = _ref[2], a = _ref[3];
      a = a != null ? a : 1;
      return "rgba(" + r + "," + g + "," + b + "," + a + ")";
    };

    ColorConverter.prototype._hslaToRgba = function() {
      var a, b, g, h, hue2rgb, l, p, q, r, s, _ref;

      _ref = this.matches[1].split(',').map(function(v) {
        if (__indexOf.call(v, '%') >= 0) {
          return parseFloat(v.trim()) / 100;
        } else {
          return parseFloat(v.trim());
        }
      }), h = _ref[0], s = _ref[1], l = _ref[2], a = _ref[3];
      h /= 360;
      a = a != null ? a : 1;
      if (s === 0) {
        r = g = b = l;
      } else {
        hue2rgb = function(p, q, t) {
          if (t < 0) {
            t += 1;
          }
          if (t > 1) {
            t -= 1;
          }
          if (t < 1 / 6) {
            return p + (q - p) * 6 * t;
          }
          if (t < 1 / 2) {
            return q;
          }
          if (t < 2 / 3) {
            return p + (q - p) * (2 / 3 - t) * 6;
          }
          return p;
        };
        q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
      }
      return "rgba(" + (Math.round(r * 255)) + "," + (Math.round(g * 255)) + "," + (Math.round(b * 255)) + ",1)";
    };

    ColorConverter.prototype._hexToRgba = function() {
      var b, g, hex, r;

      hex = this.matches[1];
      r = parseInt(hex.slice(0, 2), 16);
      g = parseInt(hex.slice(2, 4), 16);
      b = parseInt(hex.slice(4, 6), 16);
      return "rgba(" + r + "," + g + "," + b + ",1)";
    };

    ColorConverter.prototype._rgbaToHsla = function() {
      var a, b, d, g, h, l, max, min, r, rgba, s, _ref;

      rgba = this.matches[1].split(',');
      _ref = rgba.map(function(v) {
        return v.trim() / 255;
      }), r = _ref[0], g = _ref[1], b = _ref[2];
      a = rgba[3] != null ? rgba[3] : 1;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      l = (max + min) / 2;
      if (max === min) {
        h = s = 0;
      } else {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
          case r:
            h = (g - b) / d + (g < b ? 6 : 0);
            break;
          case g:
            h = (b - r) / d + 2;
            break;
          case b:
            h = (r - g) / d + 4;
            break;
          default:
            break;
        }
        h /= 6;
      }
      return "hsla(" + (Math.round(h * 360)) + "," + (Math.round(s * 100)) + "%," + (Math.round(l * 100)) + "%," + a + ")";
    };

    ColorConverter.prototype._hslaToHsla = function() {
      var a, h, l, s, _ref;

      _ref = this.matches[1].split(',').map(function(v) {
        if (__indexOf.call(v, '%') >= 0) {
          return parseFloat(v.trim()) / 100;
        } else {
          return parseFloat(v.trim());
        }
      }), h = _ref[0], s = _ref[1], l = _ref[2], a = _ref[3];
      a = a != null ? a : 1;
      return "hsla(" + h + "," + (s * 100) + "%," + (l * 100) + "%," + a + ")";
    };

    ColorConverter.prototype._hexToHsla = function() {
      this.colorDesc = this._hexToRgba();
      this._match();
      return this._rgbaToHsla();
    };

    ColorConverter.prototype._rgbaToHex = function() {
      var a, b, g, r, _ref;

      _ref = this.matches[1].split(',').slice(0, 3).map(function(v) {
        return ('00' + Number(v.trim()).toString(16)).substr(-2);
      }), r = _ref[0], g = _ref[1], b = _ref[2], a = _ref[3];
      return "#" + r + g + b;
    };

    ColorConverter.prototype._hslaToHex = function() {
      this.colorDesc = this._hslaToRgba();
      this._match();
      return this._rgbaToHex();
    };

    ColorConverter.prototype._hexToHex = function() {
      return this.colorDesc;
    };

    return ColorConverter;

  })();

  Colorfull = (function() {
    function Colorfull() {
      this.setColor = __bind(this.setColor, this);
      this.showColor = __bind(this.showColor, this);
      this.resize = __bind(this.resize, this);
      this.toggle = __bind(this.toggle, this);
      this.stop = __bind(this.stop, this);
      this.draw = __bind(this.draw, this);
      this.roll = __bind(this.roll, this);      this.canvas = document.getElementById('canvas');
      this.interval = 30;
      this.timer = null;
      this.colorDesc = null;
      this.running = false;
      this.hsla = [0, '100%', '50%', 1];
    }

    Colorfull.prototype.init = function() {
      this.resize();
      this.ctx = this.canvas.getContext('2d');
      return this;
    };

    Colorfull.prototype.roll = function() {
      this.timer = setInterval(this.draw, this.interval);
      this.running = true;
      return this;
    };

    Colorfull.prototype.draw = function() {
      var grd;

      grd = this.ctx.createRadialGradient(this.canvas.width / 2, this.canvas.height / 2, 0, this.canvas.width / 2, this.canvas.height / 2, (this.canvas.width + this.canvas.height) / 2);
      grd.addColorStop(0, "hsla(" + this.hsla[0] + ", " + this.hsla[1] + ", " + this.hsla[2] + ", " + this.hsla[3] + ")");
      grd.addColorStop(1, "hsla(" + this.hsla[0] + ", " + ((parseInt(this.hsla[1]) + 20) % 100) + "%, " + this.hsla[2] + ", " + this.hsla[3] + ")");
      console.log("hsla(" + this.hsla[0] + ", " + this.hsla[1] + ", " + this.hsla[2] + ", " + this.hsla[3] + ")");
      console.log("hsla(" + this.hsla[0] + ", " + ((parseInt(this.hsla[1]) + 20) % 100) + "%, " + this.hsla[2] + ", " + this.hsla[3] + ")");
      this.ctx.fillStyle = grd;
      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
      return this.hsla[0] = (this.hsla[0] + 1) % 360;
    };

    Colorfull.prototype.stop = function() {
      if (this.timer != null) {
        clearInterval(this.timer);
      }
      this.running = false;
      return this;
    };

    Colorfull.prototype.toggle = function() {
      if (this.running) {
        this.stop();
      } else {
        this.roll();
      }
      return this;
    };

    Colorfull.prototype.resize = function() {
      this.canvas.height = document.height;
      return this.canvas.width = document.width;
    };

    Colorfull.prototype.showColor = function(e) {
      var pixel;

      pixel = this.ctx.getImageData(e.clientX, e.clientY, 1, 1);
      return pixel.data;
    };

    Colorfull.prototype.setColor = function(colorDesc) {
      var colorConverter, hsla, matches;

      colorConverter = new ColorConverter(colorDesc);
      hsla = colorConverter.toHsla();
      if ((hsla != null) && (matches = hsla.match(/hsla?\(([0-9\.\,\ \%]+)\)/))) {
        this.hsla = matches[1].split(',').map(function(v) {
          return v.trim();
        });
        this.draw();
      }
      return this;
    };

    return Colorfull;

  })();

  colorfull = new Colorfull();

  colorfull.init().roll();

  colorPick = function(e) {
    var colorConverter, colorData, data, rgba, rgbaDesc;

    colorData = colorfull.showColor(e);
    data = [colorData[0], colorData[1], colorData[2], colorData[3]];
    if (data != null) {
      rgbaDesc = "rgba(" + data[0] + "," + data[1] + "," + data[2] + "," + (data[3] / 255) + ")";
      colorConverter = new ColorConverter(rgbaDesc);
      rgba = colorConverter.toRgba();
      $('#c-hex').val(colorConverter.toHex());
      $('#c-rgba').val(rgba);
      $('#c-hsla').val(colorConverter.toHsla());
      return $('.color-preview').css({
        'background': rgba
      });
    }
  };

  mouse = {
    move: false,
    bindMove: function() {
      if (mouse.move) {
        return false;
      }
      $('#canvas').bind('mousemove', colorPick);
      return mouse.move = true;
    },
    unbindMove: function() {
      while (!mouse.move) {
        return false;
      }
      $('#canvas').unbind('mousemove');
      return mouse.move = false;
    }
  };

  mouse.bindMove();

  $('#canvas').bind('click', function(e) {
    mouse.unbindMove();
    return colorPick(e);
  });

  $('.joke').fadeOut(10000);

  $(document).bind('keydown', 'shift+/', function(e) {
    var $shortcut;

    $shortcut = $('.shortcut');
    return $shortcut.fadeToggle(300);
  });

  $(document).bind('keydown', 's', function(e) {
    return colorfull.toggle();
  });

  $(document).bind('keydown', 'm', function(e) {
    return mouse.bindMove();
  });

  $('.color-input').bind('keyup', function(e) {
    var colorConverter, key, rgba;

    key = e.keyCode || e.which;
    if (key === 13) {
      e.preventDefault();
      colorConverter = new ColorConverter($(this).val());
      rgba = colorConverter.toRgba();
      if (rgba != null) {
        $('#c-hex').val(colorConverter.toHex());
        $('#c-rgba').val(rgba);
        $('#c-hsla').val(colorConverter.toHsla());
        $('.color-preview').css({
          'background': rgba
        });
        mouse.unbindMove();
        colorfull.stop();
        return colorfull.setColor(rgba);
      }
    }
  });

}).call(this);
