// Generated by CoffeeScript 1.6.2
(function() {
  var Colorfull, colorPick, colorfull, mouse, toHex, toHsla, toRgba,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    _this = this;

  toRgba = function(data) {
    var a, b, g, r;

    r = data[0], g = data[1], b = data[2], a = data[3];
    return "rgba(" + r + ", " + g + ", " + b + ", " + (Number((r / 255).toFixed(2))) + ")";
  };

  toHsla = function(data) {
    var a, b, d, g, h, l, max, min, r, s, _ref;

    _ref = data.map(function(c) {
      return c / 255;
    }), r = _ref[0], g = _ref[1], b = _ref[2];
    a = data[3];
    max = Math.max(r, g, b);
    min = Math.min(r, g, b);
    l = (max + min) / 2;
    if (max === min) {
      h = s = 0;
    } else {
      d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
        default:
          break;
      }
      h /= 6;
    }
    return "hsla(" + (Math.round(h * 360)) + ", " + (Math.round(s * 100)) + "%, " + (Math.round(l * 100)) + "%, " + a + ")";
  };

  toHex = function(data) {
    var a, b, g, r, toFullHex;

    r = data[0], g = data[1], b = data[2], a = data[3];
    toFullHex = function(str) {
      return ('00' + str.toString(16)).substr(-2);
    };
    return "#" + (toFullHex(r)) + (toFullHex(g)) + (toFullHex(b));
  };

  Colorfull = (function() {
    function Colorfull() {
      this.showColor = __bind(this.showColor, this);
      this.resize = __bind(this.resize, this);
      this.toggle = __bind(this.toggle, this);
      this.stop = __bind(this.stop, this);
      this.roll = __bind(this.roll, this);      this.canvas = document.getElementById('canvas');
      this.interval = 30;
      this.timer = null;
      this.color = 0;
      this.running = false;
    }

    Colorfull.prototype.init = function() {
      this.resize();
      this.ctx = this.canvas.getContext('2d');
      return this;
    };

    Colorfull.prototype.roll = function() {
      var _this = this;

      this.timer = setInterval((function() {
        var grd;

        grd = _this.ctx.createRadialGradient(_this.canvas.width / 2, _this.canvas.height / 2, 0, _this.canvas.width / 2, _this.canvas.height / 2, (_this.canvas.width + _this.canvas.height) / 2);
        grd.addColorStop(0, "hsla(" + _this.color + ", 100%, 50%, 1)");
        grd.addColorStop(1, "hsla(" + _this.color + ", 20%, 50%, 1)");
        _this.ctx.fillStyle = grd;
        _this.ctx.fillRect(0, 0, _this.canvas.width, _this.canvas.height);
        return _this.color = (_this.color + 1) % 360;
      }), this.interval);
      this.running = true;
      return this;
    };

    Colorfull.prototype.stop = function() {
      if (this.timer != null) {
        clearInterval(this.timer);
      }
      this.running = false;
      return this;
    };

    Colorfull.prototype.toggle = function() {
      if (this.running) {
        this.stop();
      } else {
        this.roll();
      }
      return this;
    };

    Colorfull.prototype.resize = function() {
      this.canvas.height = document.height;
      return this.canvas.width = document.width;
    };

    Colorfull.prototype.showColor = function(e) {
      var pixel;

      pixel = this.ctx.getImageData(e.clientX, e.clientY, 1, 1);
      return pixel.data;
    };

    return Colorfull;

  })();

  colorfull = new Colorfull();

  colorfull.init().roll();

  colorPick = function(e) {
    var colorData, data, rgba;

    colorData = colorfull.showColor(e);
    data = [colorData[0], colorData[1], colorData[2], colorData[3]];
    if (data != null) {
      rgba = toRgba(data);
      $('#c-hex').val(toHex(data));
      $('#c-rgba').val(rgba);
      $('#c-hsla').val(toHsla(data));
      return $('.color-preview').css({
        'background': rgba
      });
    }
  };

  mouse = {
    move: false,
    bindMove: function() {
      if (mouse.move) {
        return false;
      }
      $('#canvas').bind('mousemove', colorPick);
      return mouse.move = true;
    },
    unbindMove: function() {
      while (!mouse.move) {
        return false;
      }
      $('#canvas').unbind('mousemove');
      return mouse.move = false;
    }
  };

  mouse.bindMove();

  $('#canvas').bind('click', function(e) {
    mouse.unbindMove();
    return colorPick(e);
  });

  $('.joke').fadeOut(10000);

  $(document).bind('keydown', 'shift+/', function(e) {
    var $shortcut;

    $shortcut = $('.shortcut');
    return $shortcut.fadeToggle(300);
  });

  $(document).bind('keydown', 's', function(e) {
    return colorfull.toggle();
  });

  $(document).bind('keydown', 'm', function(e) {
    return mouse.bindMove();
  });

}).call(this);
